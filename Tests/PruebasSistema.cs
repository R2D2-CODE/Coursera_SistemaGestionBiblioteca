using SistemaGestionBiblioteca.Models;

namespace SistemaGestionBiblioteca.Tests
{
    /// <summary>
    /// Clase para ejecutar pruebas autom√°ticas del sistema
    /// Demuestra las funcionalidades implementadas
    /// </summary>
    public static class PruebasSistema
    {
        /// <summary>
        /// Ejecuta una bater√≠a completa de pruebas del sistema
        /// </summary>
        public static void EjecutarPruebas()
        {
            Console.WriteLine("üß™ INICIANDO PRUEBAS AUTOM√ÅTICAS DEL SISTEMA");
            Console.WriteLine(new string('=', 60));
            
            var bibliotecaService = new Services.BibliotecaService();
            
            try
            {
                // Prueba 1: B√∫squeda de libros
                PruebaBusquedaLibros(bibliotecaService);
                
                // Prueba 2: Pr√©stamos con l√≠mites
                PruebaLimitePrestamos(bibliotecaService);
                
                // Prueba 3: Devoluciones
                PruebaDevoluciones(bibliotecaService);
                
                // Prueba 4: Validaciones de errores
                PruebaValidaciones(bibliotecaService);
                
                Console.WriteLine("\n‚úÖ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE");
                Console.WriteLine("   El sistema funciona correctamente seg√∫n los requisitos");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"\n‚ùå ERROR EN LAS PRUEBAS: {ex.Message}");
            }
        }

        private static void PruebaBusquedaLibros(Services.BibliotecaService servicio)
        {
            Console.WriteLine("\nüîç PRUEBA 1: B√öSQUEDA DE LIBROS");
            Console.WriteLine(new string('-', 40));
            
            // Buscar libro existente
            var resultados = servicio.BuscarLibrosPorTitulo("quijote");
            Console.WriteLine($"‚úì B√∫squeda 'quijote': {resultados.Count} resultado(s)");
            
            // B√∫squeda parcial
            resultados = servicio.BuscarLibrosPorTitulo("1984");
            Console.WriteLine($"‚úì B√∫squeda '1984': {resultados.Count} resultado(s)");
            
            // B√∫squeda sin resultados
            resultados = servicio.BuscarLibrosPorTitulo("libro inexistente");
            Console.WriteLine($"‚úì B√∫squeda libro inexistente: {resultados.Count} resultado(s)");
        }

        private static void PruebaLimitePrestamos(Services.BibliotecaService servicio)
        {
            Console.WriteLine("\nüìö PRUEBA 2: L√çMITE DE PR√âSTAMOS");
            Console.WriteLine(new string('-', 40));
            
            // Prestar 3 libros al mismo usuario (l√≠mite)
            Console.WriteLine("Prestando libros a usuario 'TestUser':");
            bool resultado1 = servicio.PrestarLibro(1, "TestUser");
            bool resultado2 = servicio.PrestarLibro(2, "TestUser");
            bool resultado3 = servicio.PrestarLibro(3, "TestUser");
            
            Console.WriteLine($"‚úì Pr√©stamo 1: {(resultado1 ? "Exitoso" : "Fallido")}");
            Console.WriteLine($"‚úì Pr√©stamo 2: {(resultado2 ? "Exitoso" : "Fallido")}");
            Console.WriteLine($"‚úì Pr√©stamo 3: {(resultado3 ? "Exitoso" : "Fallido")}");
            
            // Intentar prestar un cuarto libro (debe fallar)
            Console.WriteLine("Intentando prestar 4to libro (debe fallar):");
            bool resultado4 = servicio.PrestarLibro(4, "TestUser");
            Console.WriteLine($"‚úì Pr√©stamo 4: {(resultado4 ? "Exitoso - ERROR!" : "Bloqueado correctamente")}");
        }

        private static void PruebaDevoluciones(Services.BibliotecaService servicio)
        {
            Console.WriteLine("\nüìñ PRUEBA 3: DEVOLUCIONES");
            Console.WriteLine(new string('-', 30));
            
            // Devolver un libro prestado
            bool devolucion = servicio.DevolverLibro(1, "TestUser");
            Console.WriteLine($"‚úì Devoluci√≥n libro ID 1: {(devolucion ? "Exitosa" : "Fallida")}");
            
            // Ahora deber√≠a poder prestar otro libro
            bool nuevoPrestamo = servicio.PrestarLibro(4, "TestUser");
            Console.WriteLine($"‚úì Nuevo pr√©stamo tras devoluci√≥n: {(nuevoPrestamo ? "Exitoso" : "Fallido")}");
        }

        private static void PruebaValidaciones(Services.BibliotecaService servicio)
        {
            Console.WriteLine("\n‚ö†Ô∏è PRUEBA 4: VALIDACIONES DE ERRORES");
            Console.WriteLine(new string('-', 45));
            
            // Intentar prestar libro ya prestado
            bool prestamoDuplicado = servicio.PrestarLibro(2, "OtroUser");
            Console.WriteLine($"‚úì Pr√©stamo duplicado bloqueado: {(!prestamoDuplicado ? "Correcto" : "ERROR")}");
            
            // Intentar devolver libro no prestado por el usuario
            bool devolucionIncorrecta = servicio.DevolverLibro(5, "TestUser");
            Console.WriteLine($"‚úì Devoluci√≥n incorrecta bloqueada: {(!devolucionIncorrecta ? "Correcto" : "ERROR")}");
            
            // B√∫squeda con texto vac√≠o
            var busquedaVacia = servicio.BuscarLibrosPorTitulo("");
            Console.WriteLine($"‚úì B√∫squeda vac√≠a manejada: {(busquedaVacia.Count == 0 ? "Correcto" : "ERROR")}");
        }
    }
}
