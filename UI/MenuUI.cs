using SistemaGestionBiblioteca.Services;
using SistemaGestionBiblioteca.Tests;

namespace SistemaGestionBiblioteca.UI
{
    /// <summary>
    /// Clase que maneja la interfaz de usuario y la interacci√≥n con el usuario
    /// </summary>
    public static class MenuUI
    {
        /// <summary>
        /// Muestra el men√∫ principal y maneja la navegaci√≥n
        /// </summary>
        public static void MostrarMenuPrincipal(BibliotecaService bibliotecaService)
        {
            bool continuar = true;
            
            Console.WriteLine("üèõÔ∏è  BIENVENIDO AL SISTEMA DE GESTI√ìN DE BIBLIOTECAS");
            Console.WriteLine("=" + new string('=', 60));
            
            while (continuar)
            {
                try
                {
                    MostrarOpciones();
                    
                    Console.Write("\n‚û§ Seleccione una opci√≥n (1-10): ");
                    string? entrada = Console.ReadLine()?.Trim();
                    
                    if (string.IsNullOrEmpty(entrada))
                    {
                        Console.WriteLine("‚ö†Ô∏è  Por favor, ingrese una opci√≥n v√°lida.");
                        EsperarTecla();
                        continue;
                    }

                    Console.WriteLine(); // L√≠nea en blanco para mejor legibilidad

                    switch (entrada)
                    {
                        case "1":
                            BuscarLibro(bibliotecaService);
                            break;
                        case "2":
                            PrestarLibro(bibliotecaService);
                            break;
                        case "3":
                            DevolverLibro(bibliotecaService);
                            break;
                        case "4":
                            AgregarLibro(bibliotecaService);
                            break;
                        case "5":
                            bibliotecaService.MostrarTodosLosLibros();
                            break;
                        case "6":
                            bibliotecaService.MostrarUsuarios();
                            break;
                        case "7":
                            bibliotecaService.MostrarEstadisticas();
                            break;
                        case "8":
                            MostrarAyuda();
                            break;
                        case "9":
                            EjecutarPruebas();
                            break;
                        case "10":
                            Console.WriteLine("üëã ¬°Gracias por usar el Sistema de Gesti√≥n de Bibliotecas!");
                            Console.WriteLine("   Desarrollado como proyecto final del curso.");
                            continuar = false;
                            continue;
                        default:
                            Console.WriteLine("‚ö†Ô∏è  Opci√≥n no v√°lida. Por favor, seleccione una opci√≥n del 1 al 10.");
                            break;
                    }

                    if (continuar)
                    {
                        EsperarTecla();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚úó Error inesperado: {ex.Message}");
                    Console.WriteLine("  Por favor, intente nuevamente.");
                    EsperarTecla();
                }
            }
        }

        private static void MostrarOpciones()
        {
            Console.Clear();
            Console.WriteLine("üèõÔ∏è  SISTEMA DE GESTI√ìN DE BIBLIOTECAS");
            Console.WriteLine("=" + new string('=', 50));
            Console.WriteLine();
            Console.WriteLine("üìã OPCIONES DISPONIBLES:");
            Console.WriteLine("  1Ô∏è‚É£  Buscar libro por t√≠tulo");
            Console.WriteLine("  2Ô∏è‚É£  Prestar libro");
            Console.WriteLine("  3Ô∏è‚É£  Devolver libro");
            Console.WriteLine("  4Ô∏è‚É£  Agregar nuevo libro");
            Console.WriteLine("  5Ô∏è‚É£  Ver todos los libros");
            Console.WriteLine("  6Ô∏è‚É£  Ver usuarios y sus pr√©stamos");
            Console.WriteLine("  7Ô∏è‚É£  Ver estad√≠sticas del sistema");
            Console.WriteLine("  8Ô∏è‚É£  Ayuda e informaci√≥n");
            Console.WriteLine("  9Ô∏è‚É£  Ejecutar pruebas autom√°ticas");
            Console.WriteLine("  üîü  Salir");
        }

        private static void BuscarLibro(BibliotecaService bibliotecaService)
        {
            Console.WriteLine("üîç BUSCAR LIBRO POR T√çTULO");
            Console.WriteLine(new string('-', 30));
            
            Console.Write("Ingrese el t√≠tulo del libro (o parte de √©l): ");
            string? titulo = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(titulo))
            {
                Console.WriteLine("‚ö†Ô∏è  El t√≠tulo no puede estar vac√≠o.");
                return;
            }

            var librosEncontrados = bibliotecaService.BuscarLibrosPorTitulo(titulo);
            
            if (!librosEncontrados.Any())
            {
                Console.WriteLine($"‚ùå No se encontraron libros que contengan '{titulo}' en el t√≠tulo.");
                Console.WriteLine("üí° Sugerencia: Intente con una b√∫squeda m√°s general o verifique la ortograf√≠a.");
                return;
            }

            Console.WriteLine($"\n‚úÖ Se encontraron {librosEncontrados.Count} libro(s) que contienen '{titulo}':");
            Console.WriteLine(new string('-', 80));
            
            foreach (var libro in librosEncontrados.OrderBy(l => l.Titulo))
            {
                Console.WriteLine($"  {libro}");
            }
        }

        private static void PrestarLibro(BibliotecaService bibliotecaService)
        {
            Console.WriteLine("üìö PRESTAR LIBRO");
            Console.WriteLine(new string('-', 20));
            
            Console.Write("Ingrese el ID del libro: ");
            string? idTexto = Console.ReadLine()?.Trim();
            
            if (!int.TryParse(idTexto, out int id))
            {
                Console.WriteLine("‚ö†Ô∏è  Por favor, ingrese un ID v√°lido (n√∫mero entero).");
                return;
            }

            Console.Write("Ingrese el nombre del usuario: ");
            string? usuario = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(usuario))
            {
                Console.WriteLine("‚ö†Ô∏è  El nombre de usuario no puede estar vac√≠o.");
                return;
            }

            bibliotecaService.PrestarLibro(id, usuario);
        }

        private static void DevolverLibro(BibliotecaService bibliotecaService)
        {
            Console.WriteLine("üìñ DEVOLVER LIBRO");
            Console.WriteLine(new string('-', 20));
            
            Console.Write("Ingrese el ID del libro: ");
            string? idTexto = Console.ReadLine()?.Trim();
            
            if (!int.TryParse(idTexto, out int id))
            {
                Console.WriteLine("‚ö†Ô∏è  Por favor, ingrese un ID v√°lido (n√∫mero entero).");
                return;
            }

            Console.Write("Ingrese el nombre del usuario: ");
            string? usuario = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(usuario))
            {
                Console.WriteLine("‚ö†Ô∏è  El nombre de usuario no puede estar vac√≠o.");
                return;
            }

            bibliotecaService.DevolverLibro(id, usuario);
        }

        private static void AgregarLibro(BibliotecaService bibliotecaService)
        {
            Console.WriteLine("‚ûï AGREGAR NUEVO LIBRO");
            Console.WriteLine(new string('-', 25));
            
            Console.Write("Ingrese el t√≠tulo del libro: ");
            string? titulo = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(titulo))
            {
                Console.WriteLine("‚ö†Ô∏è  El t√≠tulo no puede estar vac√≠o.");
                return;
            }

            Console.Write("Ingrese el autor del libro: ");
            string? autor = Console.ReadLine()?.Trim();
            
            if (string.IsNullOrEmpty(autor))
            {
                Console.WriteLine("‚ö†Ô∏è  El autor no puede estar vac√≠o.");
                return;
            }

            Console.Write("Ingrese el ISBN (opcional): ");
            string? isbn = Console.ReadLine()?.Trim() ?? string.Empty;

            bibliotecaService.AgregarLibro(titulo, autor, isbn);
        }

        private static void MostrarAyuda()
        {
            Console.WriteLine("‚ùì AYUDA E INFORMACI√ìN DEL SISTEMA");
            Console.WriteLine(new string('=', 45));
            Console.WriteLine();
            Console.WriteLine("üìñ FUNCIONALIDADES PRINCIPALES:");
            Console.WriteLine("  ‚Ä¢ B√∫squeda de libros por t√≠tulo (b√∫squeda parcial)");
            Console.WriteLine("  ‚Ä¢ Pr√©stamo de libros con l√≠mite de 3 por usuario");
            Console.WriteLine("  ‚Ä¢ Devoluci√≥n de libros prestados");
            Console.WriteLine("  ‚Ä¢ Gesti√≥n de usuarios autom√°tica");
            Console.WriteLine("  ‚Ä¢ Seguimiento del estado de pr√©stamos");
            Console.WriteLine();
            Console.WriteLine("üîç B√öSQUEDA:");
            Console.WriteLine("  ‚Ä¢ Puede buscar por t√≠tulo completo o parcial");
            Console.WriteLine("  ‚Ä¢ La b√∫squeda no distingue may√∫sculas/min√∫sculas");
            Console.WriteLine("  ‚Ä¢ Ejemplo: buscar 'quijote' encontrar√° 'El Quijote'");
            Console.WriteLine();
            Console.WriteLine("üìö PR√âSTAMOS:");
            Console.WriteLine("  ‚Ä¢ Cada usuario puede tener m√°ximo 3 libros prestados");
            Console.WriteLine("  ‚Ä¢ Los usuarios se crean autom√°ticamente al primer pr√©stamo");
            Console.WriteLine("  ‚Ä¢ Un libro prestado no puede prestarse a otro usuario");
            Console.WriteLine();
            Console.WriteLine("üìñ DEVOLUCIONES:");
            Console.WriteLine("  ‚Ä¢ Solo el usuario que prest√≥ el libro puede devolverlo");
            Console.WriteLine("  ‚Ä¢ Al devolver, el libro queda disponible para otros usuarios");
            Console.WriteLine();
            Console.WriteLine("üí° CONSEJOS:");
            Console.WriteLine("  ‚Ä¢ Use la opci√≥n 5 para ver todos los libros y sus IDs");
            Console.WriteLine("  ‚Ä¢ Use la opci√≥n 6 para ver qu√© libros tiene cada usuario");
            Console.WriteLine("  ‚Ä¢ Use la opci√≥n 7 para ver estad√≠sticas del sistema");
            Console.WriteLine();
            Console.WriteLine("üë®‚Äçüíª Proyecto desarrollado como evaluaci√≥n final del curso.");
        }

        private static void EjecutarPruebas()
        {
            Console.WriteLine("üß™ EJECUTANDO PRUEBAS AUTOM√ÅTICAS");
            Console.WriteLine(new string('-', 40));
            Console.WriteLine("Esta opci√≥n ejecutar√° pruebas para validar:");
            Console.WriteLine("‚úì Funcionalidad de b√∫squeda");
            Console.WriteLine("‚úì L√≠mite de 3 pr√©stamos por usuario");
            Console.WriteLine("‚úì Sistema de devoluciones");
            Console.WriteLine("‚úì Validaciones de errores");
            Console.WriteLine();
            Console.Write("¬øDesea continuar? (S/N): ");
            
            string? respuesta = Console.ReadLine()?.Trim().ToUpper();
            if (respuesta == "S" || respuesta == "SI" || respuesta == "Y" || respuesta == "YES")
            {
                Console.WriteLine();
                PruebasSistema.EjecutarPruebas();
            }
            else
            {
                Console.WriteLine("Pruebas canceladas.");
            }
        }

        private static void EsperarTecla()
        {
            Console.WriteLine("\n‚è∏Ô∏è  Presione cualquier tecla para continuar...");
            Console.ReadKey(true);
        }
    }
}
